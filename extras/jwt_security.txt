--------------------------------------------------------------------------------------------------
IMPROVE JWT SECURITY 
--------------------------------------------------------------------------------------------------




1. Use JWT with a Secret + Public/Private Key (RS256 or ES256)
--------------------------------------------------------------------------------------------------
â€¢	Instead of HS256 (shared secret), use RS256 (public/private key pair).
â€¢	Only the server can sign JWTs, but anyone with the public key can verify them.
â€¢	Even if an attacker gets the public key, they cannot forge valid JWTs.

ðŸ”¹ Example: Generate RSA Key Pair
openssl genpkey -algorithm RSA -out private_key.pem
openssl rsa -pubout -in private_key.pem -out public_key.pem

ðŸ”¹ Example: Use RS256 in Python
private_key = open("private_key.pem", "r").read()
public_key = open("public_key.pem", "r").read()
token = jwt.encode(payload, private_key, algorithm="RS256")  # Signing
decoded = jwt.decode(token, public_key, algorithms=["RS256"])  # Verification
--------------------------------------------------------------------------------------------------




2. Token Revocation (Blacklist) â€“ Preventing Unauthorized JWT Usage
--------------------------------------------------------------------------------------------------
Since JWTs are stateless, they cannot be invalidated once issued. This means that even if a user logs out or an admin revokes access, the JWT remains valid until it expires.
To mitigate this risk, we use token revocation (blacklisting) to manually invalidate tokens before they expire.

ðŸ›‘ Problem: Why Do We Need Token Blacklisting?
	1.	User Logs Out â†’ The JWT is still valid until it expires.
	2.	Userâ€™s Account is Disabled â†’ The old JWT can still be used to access services.
	3.	Token is Stolen â†’ The attacker can use the JWT until it expires.
	4.	Session Hijacking â†’ If someone hijacks a session, they retain access even after the user logs out.

âœ… Solution: How Token Blacklisting Works
We store invalidated JWTs (or their unique IDs) in a database or cache (like Redis) and check against this list when verifying tokens.
ðŸ”¹ Steps to Implement Token Blacklisting
	1.	When a user logs out or their token needs to be revoked, store the token ID (jti) in a blacklist.
	2.	When verifying JWTs, check if the jti exists in the blacklist.
	3.	If itâ€™s in the blacklist, reject the token.

ðŸ”¹ How It Works in a Real Application
	1.	User logs in â†’ Receives a JWT with a jti and expiration time.
	2.	User logs out â†’ The jti is added to Redis (blacklist).
	3.	User (or attacker) tries using the old token â†’ The system checks Redis and rejects it if blacklisted.
--------------------------------------------------------------------------------------------------